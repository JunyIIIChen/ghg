{"ast":null,"code":"var _jsxFileName = \"/Users/chenjunyi/Projects/ghg/BackendDev/frontend/src/calculate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport './calculate.css';\nimport gasImage from './photo/gas.png';\nimport waterImage from './photo/water.png';\nimport electricityImage from './photo/electricity.png';\n\n// Array of questions with their options and types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  question: \"Does your household have solar energy sources installed?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}, {\n  question: \"What heating/cooling system do you use in your household?\",\n  options: [\"Electric\", \"Gas\"],\n  type: \"single\"\n}, {\n  question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\n  options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\n  type: \"single\"\n}, {\n  question: \"Which electric appliances do you use in your household? (select all that apply)\",\n  options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\n  type: \"multiple\"\n}, {\n  question: \"How frequently do you use the washing machine and dryer in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the electric oven in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the dishwasher in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How frequently do you cook in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\n  type: \"single\"\n}, {\n  question: \"How long do you typically spend showering or bathing?\",\n  options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\n  type: \"single\"\n}, {\n  question: \"Do you have a garden or lawn that needs watering?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}];\nconst australiaPerCapitaEmissions = 14.78;\nconst australiaAverageData = [10074, 6761, 12240]; // Gas, Electricity, Water\n\nfunction Calculate() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showChart, setShowChart] = useState(false);\n  const [fade, setFade] = useState('');\n  const [isOptionSelected, setIsOptionSelected] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [gas, setGas] = useState('');\n  const [electricity, setElectricity] = useState('');\n  const [water, setWater] = useState('');\n  const [inputSubmitted, setInputSubmitted] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const [emissions, setEmissions] = useState(0); // State for total emissions\n  const [comparisonChartData, setComparisonChartData] = useState(null);\n  // Constants for emission factors (you should adjust these according to your screenshots)\n  const EF2_Electricity = 0.85;\n  const EF3_Electricity = 0.07;\n\n  // Example for LPG gas\n  const EC_Gas = 25.7; // Energy content factor for LPG\n  const EF1_Gas = 60.6; // Scope 1 emission factor for LPG\n  const EF3_Gas = 20.2; // Scope 3 emission factor for LPG\n\n  // Example for Water\n  const emissionFactor_PotableWater = 0.173;\n  const emissionFactor_Wastewater = 0.875;\n\n  // Function to calculate emissions\n  const calculateEmissions = () => {\n    const electricityValue = parseFloat(electricity);\n    const gasValue = parseFloat(gas);\n    const waterValue = parseFloat(water);\n    const electricityEmissions = electricityValue * (EF2_Electricity + EF3_Electricity) / 1000;\n    const gasEmissions = gasValue * EC_Gas * (EF1_Gas + EF3_Gas) / 1000;\n    const waterEmissions = waterValue * emissionFactor_PotableWater + waterValue * emissionFactor_Wastewater;\n    return electricityEmissions + gasEmissions + waterEmissions;\n  };\n  const generateComparisonChart = userEmissions => {\n    const comparisonData = {\n      labels: ['Your Emissions', 'Australia Average'],\n      datasets: [{\n        label: 'CO2 Emissions (tonnes)',\n        data: [userEmissions, australiaPerCapitaEmissions],\n        backgroundColor: ['rgba(99, 255, 132, 0.6)', 'rgba(255, 99, 132, 0.6)']\n      }]\n    };\n    setComparisonChartData(comparisonData);\n  };\n  // Function to handle input submission\n  const handleInputSubmit = () => {\n    // Check if all input fields are filled and non-negative\n    if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\n      // Generate bar chart data\n      const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\n      setEmissions(totalEmissionsTonnes); // Update emissions state\n      generateComparisonChart(totalEmissionsTonnes);\n      const newData = {\n        labels: [\"Gas\", \"Electricity\", \"Water\"],\n        datasets: [{\n          label: 'Usage',\n          // User's input data\n          data: [parseFloat(gas), parseFloat(electricity), parseFloat(water / 10)],\n          backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)']\n        }, {\n          label: 'Australia Average',\n          // Australia's average data\n          data: australiaAverageData,\n          backgroundColor: ['rgba(255, 99, 132, 0.3)', 'rgba(54, 162, 235, 0.3)', 'rgba(255, 206, 86, 0.3)']\n        }]\n      };\n      setChartData(newData);\n      setShowChart(false);\n      setCurrentQuestionIndex(0);\n      setInputSubmitted(true);\n    } else {\n      alert('Please enter all the required data. And the data must be positive.');\n    }\n  };\n\n  // Function to handle option selection\n  const handleOptionSelect = selectedOption => {\n    setIsOptionSelected(true);\n    setAnswers([...answers, {\n      question: questions[currentQuestionIndex].question,\n      answer: selectedOption\n    }]);\n  };\n\n  // Function to move to the next question or display the chart\n  const handleNext = () => {\n    if (isOptionSelected) {\n      setFade('fade-exit');\n      setTimeout(() => {\n        if (currentQuestionIndex < questions.length - 1) {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          setShowChart(true);\n        }\n        setFade('fade-enter-active');\n        setIsOptionSelected(false);\n      }, 500);\n    }\n  };\n\n  // Chart options configuration\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: !showChart && !inputSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter the yearly amount of your family\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: gasImage,\n          alt: \"Gas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: electricityImage,\n          alt: \"Electricity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: waterImage,\n          alt: \"Water\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `fade ${fade} question-update`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"9%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"gasInput\",\n            children: \"Gas:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"gasInput\",\n            value: gas,\n            onChange: e => setGas(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"PJ\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"5%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"electricityInput\",\n            children: \"Electricity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"electricityInput\",\n            value: electricity,\n            onChange: e => setElectricity(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"KWH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"5%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"waterInput\",\n            children: \"Water:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"waterInput\",\n            value: water,\n            onChange: e => setWater(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }, this) : !showChart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\",\n            id: `option-${index}`,\n            name: \"option\",\n            value: option,\n            onChange: () => handleOptionSelect(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `option-${index}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !isOptionSelected,\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [comparisonChartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-box\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              data: comparisonChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          style: {\n            marginLeft: '20%'\n          },\n          children: [\"Total CO2 Emissions: \", emissions.toFixed(2), \" tonnes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this), showChart && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-box\",\n          children: chartData && /*#__PURE__*/_jsxDEV(Bar, {\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginLeft: '20%'\n          },\n          children: \"Notes: water is 10L electricity is KWH Gas is PJ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n}\n_s(Calculate, \"FAueskPHaSh4c2/iiSrwR8pYaBU=\");\n_c = Calculate;\nexport default Calculate;\nvar _c;\n$RefreshReg$(_c, \"Calculate\");","map":{"version":3,"names":["React","useState","Bar","gasImage","waterImage","electricityImage","jsxDEV","_jsxDEV","questions","question","options","type","australiaPerCapitaEmissions","australiaAverageData","Calculate","_s","currentQuestionIndex","setCurrentQuestionIndex","showChart","setShowChart","fade","setFade","isOptionSelected","setIsOptionSelected","answers","setAnswers","gas","setGas","electricity","setElectricity","water","setWater","inputSubmitted","setInputSubmitted","chartData","setChartData","emissions","setEmissions","comparisonChartData","setComparisonChartData","EF2_Electricity","EF3_Electricity","EC_Gas","EF1_Gas","EF3_Gas","emissionFactor_PotableWater","emissionFactor_Wastewater","calculateEmissions","electricityValue","parseFloat","gasValue","waterValue","electricityEmissions","gasEmissions","waterEmissions","generateComparisonChart","userEmissions","comparisonData","labels","datasets","label","data","backgroundColor","handleInputSubmit","totalEmissionsTonnes","newData","alert","handleOptionSelect","selectedOption","answer","handleNext","setTimeout","length","chartOptions","scales","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","marginLeft","htmlFor","width","id","value","onChange","e","target","onClick","map","option","index","name","disabled","toFixed","_c","$RefreshReg$"],"sources":["/Users/chenjunyi/Projects/ghg/BackendDev/frontend/src/calculate.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './calculate.css';\r\nimport gasImage from './photo/gas.png';\r\nimport waterImage from './photo/water.png';\r\nimport electricityImage from './photo/electricity.png';\r\n\r\n// Array of questions with their options and types\r\nconst questions = [\r\n    {\r\n        question: \"Does your household have solar energy sources installed?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"What heating/cooling system do you use in your household?\",\r\n        options: [\"Electric\", \"Gas\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\r\n        options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Which electric appliances do you use in your household? (select all that apply)\",\r\n        options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\r\n        type: \"multiple\",\r\n    },\r\n    {\r\n        question: \"How frequently do you use the washing machine and dryer in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the electric oven in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the dishwasher in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How frequently do you cook in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How long do you typically spend showering or bathing?\",\r\n        options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Do you have a garden or lawn that needs watering?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n];\r\nconst australiaPerCapitaEmissions = 14.78;\r\nconst australiaAverageData = [10074, 6761, 12240]; // Gas, Electricity, Water\r\n\r\nfunction Calculate() {\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showChart, setShowChart] = useState(false);\r\n    const [fade, setFade] = useState('');\r\n    const [isOptionSelected, setIsOptionSelected] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [gas, setGas] = useState('');\r\n    const [electricity, setElectricity] = useState('');\r\n    const [water, setWater] = useState('');\r\n    const [inputSubmitted, setInputSubmitted] = useState(false);\r\n    const [chartData, setChartData] = useState(null);\r\n    const [emissions, setEmissions] = useState(0); // State for total emissions\r\n    const [comparisonChartData, setComparisonChartData] = useState(null);\r\n    // Constants for emission factors (you should adjust these according to your screenshots)\r\n    const EF2_Electricity = 0.85;\r\n    const EF3_Electricity = 0.07;\r\n    \r\n    // Example for LPG gas\r\n    const EC_Gas = 25.7; // Energy content factor for LPG\r\n    const EF1_Gas = 60.6; // Scope 1 emission factor for LPG\r\n    const EF3_Gas = 20.2; // Scope 3 emission factor for LPG\r\n    \r\n    // Example for Water\r\n    const emissionFactor_PotableWater = 0.173;\r\n    const emissionFactor_Wastewater = 0.875;\r\n  \r\n    // Function to calculate emissions\r\n    const calculateEmissions = () => {\r\n      const electricityValue = parseFloat(electricity);\r\n      const gasValue = parseFloat(gas);\r\n      const waterValue = parseFloat(water);\r\n\r\n      const electricityEmissions = (electricityValue * (EF2_Electricity + EF3_Electricity)) / 1000;\r\n      const gasEmissions = (gasValue * EC_Gas * (EF1_Gas + EF3_Gas)) / 1000;\r\n      const waterEmissions = waterValue * emissionFactor_PotableWater + waterValue * emissionFactor_Wastewater;\r\n\r\n      return electricityEmissions + gasEmissions + waterEmissions;\r\n    };\r\n    const generateComparisonChart = (userEmissions) => {\r\n        const comparisonData = {\r\n            labels: ['Your Emissions', 'Australia Average'],\r\n            datasets: [\r\n                {\r\n                    label: 'CO2 Emissions (tonnes)',\r\n                    data: [userEmissions, australiaPerCapitaEmissions],\r\n                    backgroundColor: [\r\n                        'rgba(99, 255, 132, 0.6)',\r\n                        'rgba(255, 99, 132, 0.6)',\r\n                    ],\r\n                },\r\n            ],\r\n        };\r\n        setComparisonChartData(comparisonData);\r\n    };\r\n    // Function to handle input submission\r\n    const handleInputSubmit = () => {\r\n        // Check if all input fields are filled and non-negative\r\n        if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\r\n            // Generate bar chart data\r\n            const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\r\n            setEmissions(totalEmissionsTonnes); // Update emissions state\r\n            generateComparisonChart(totalEmissionsTonnes);\r\n            const newData = {\r\n                labels: [\"Gas\", \"Electricity\", \"Water\"],\r\n                datasets: [\r\n                    {\r\n                        label: 'Usage', // User's input data\r\n                        data: [parseFloat(gas), parseFloat(electricity), parseFloat(water/10)],\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.6)',\r\n                            'rgba(54, 162, 235, 0.6)',\r\n                            'rgba(255, 206, 86, 0.6)',\r\n                        ],\r\n                    },\r\n                    {\r\n                        label: 'Australia Average', // Australia's average data\r\n                        data: australiaAverageData,\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.3)',\r\n                            'rgba(54, 162, 235, 0.3)',\r\n                            'rgba(255, 206, 86, 0.3)',\r\n                        ],\r\n                    },\r\n                ],\r\n            };\r\n            setChartData(newData);\r\n\r\n            setShowChart(false);\r\n            setCurrentQuestionIndex(0);\r\n            setInputSubmitted(true);\r\n        } else {\r\n            alert('Please enter all the required data. And the data must be positive.');\r\n        }\r\n    };\r\n\r\n    // Function to handle option selection\r\n    const handleOptionSelect = (selectedOption) => {\r\n        setIsOptionSelected(true);\r\n        setAnswers([...answers, { question: questions[currentQuestionIndex].question, answer: selectedOption }]);\r\n    };\r\n\r\n    // Function to move to the next question or display the chart\r\n    const handleNext = () => {\r\n        if (isOptionSelected) {\r\n            setFade('fade-exit');\r\n            setTimeout(() => {\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                } else {\r\n                    setShowChart(true);\r\n                }\r\n                setFade('fade-enter-active');\r\n                setIsOptionSelected(false); \r\n            }, 500); \r\n        }\r\n    };\r\n    \r\n    // Chart options configuration\r\n    const chartOptions = {\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n            },\r\n        },\r\n    };\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            {!showChart && !inputSubmitted ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <div>\r\n                        <p>Please enter the yearly amount of your family</p>\r\n                    </div>\r\n                    <div className=\"image-container\">\r\n                        <img src={gasImage} alt=\"Gas\" />\r\n                        <img src={electricityImage} alt=\"Electricity\" />\r\n                        <img src={waterImage} alt=\"Water\" />\r\n                    </div>\r\n                    <div className={`fade ${fade} question-update`}>\r\n                        <div className=\"input-group\" style={{marginLeft:\"9%\"}}>\r\n                            <label htmlFor=\"gasInput\">Gas:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"gasInput\" value={gas} onChange={(e) => setGas(e.target.value)} />\r\n                            <text>PJ</text>\r\n                        </div>\r\n                        <div className=\"input-group\" style={{marginLeft:\"5%\"}}>\r\n                            <label htmlFor=\"electricityInput\">Electricity:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"electricityInput\" value={electricity} onChange={(e) => setElectricity(e.target.value)} />\r\n                            <text>KWH</text>\r\n                        </div>\r\n                        <div className=\"input-group\" style={{marginLeft:\"5%\"}}>\r\n                            <label htmlFor=\"waterInput\">Water:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"waterInput\" value={water} onChange={(e) => setWater(e.target.value)} />\r\n                            <text>L</text>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={handleInputSubmit}>Submit</button>\r\n                    </div>\r\n                </div>\r\n            ) : !showChart ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <h2>{questions[currentQuestionIndex].question}</h2>\r\n                    <div className=\"options-container\">\r\n                        {questions[currentQuestionIndex].options.map((option, index) => (\r\n                            <div key={index}>\r\n                                <input\r\n                                    type={questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\"}\r\n                                    id={`option-${index}`}\r\n                                    name=\"option\"\r\n                                    value={option}\r\n                                    onChange={() => handleOptionSelect(option)}\r\n                                />\r\n                                <label htmlFor={`option-${index}`}>{option}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <button disabled={!isOptionSelected} onClick={handleNext}>Next</button>\r\n                </div>\r\n            ) : (\r\n                <div className={`fade ${fade}`}>\r\n                    <div >\r\n                        \r\n                        {comparisonChartData && (\r\n                        <div className=\"chart-container\">\r\n                            <div className=\"chart-box\">\r\n                            <Bar data={comparisonChartData} options={chartOptions} />\r\n                            </div>\r\n                        </div>\r\n                        )}\r\n                        <text style={{marginLeft:'20%'}}>Total CO2 Emissions: {emissions.toFixed(2)} tonnes</text>\r\n                    </div>\r\n                        {showChart && (\r\n                            <div className=\"chart-container\">\r\n                            <div className=\"chart-box\">\r\n                                {chartData && <Bar data={chartData} options={chartOptions} />}\r\n                            </div>\r\n                            </div>\r\n                        )}\r\n                    <div>\r\n                        <p style={{marginLeft:'20%'}}>Notes: water is 10L\r\n                            electricity is KWH\r\n                            Gas is PJ\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}