{"ast":null,"code":"var _jsxFileName = \"/Users/chenjunyi/Projects/ghg/BackendDev/frontend/src/calculate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport './calculate.css';\n\n// Array of questions with their options and types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  question: \"Does your household have solar energy sources installed?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}, {\n  question: \"What heating/cooling system do you use in your household?\",\n  options: [\"Electric\", \"Gas\"],\n  type: \"single\"\n}, {\n  question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\n  options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\n  type: \"single\"\n}, {\n  question: \"Which electric appliances do you use in your household? (select all that apply)\",\n  options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\n  type: \"multiple\"\n}, {\n  question: \"How frequently do you use the washing machine and dryer in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the electric oven in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the dishwasher in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How frequently do you cook in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\n  type: \"single\"\n}, {\n  question: \"How long do you typically spend showering or bathing?\",\n  options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\n  type: \"single\"\n}, {\n  question: \"Do you have a garden or lawn that needs watering?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}];\n\n// Australia's average data for comparison\nconst australiaAverageData = [10074, 6761, 12240]; // Gas, Electricity, Water\n\nfunction Calculate() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showChart, setShowChart] = useState(false);\n  const [fade, setFade] = useState('');\n  const [isOptionSelected, setIsOptionSelected] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [gas, setGas] = useState('');\n  const [electricity, setElectricity] = useState('');\n  const [water, setWater] = useState('');\n  const [inputSubmitted, setInputSubmitted] = useState(false);\n  const [chartData, setChartData] = useState(null);\n\n  // Function to handle input submission\n  const handleInputSubmit = () => {\n    // Check if all input fields are filled and non-negative\n    if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\n      // Generate bar chart data\n      const newData = {\n        labels: [\"Gas\", \"Electricity\", \"Water\"],\n        datasets: [{\n          label: 'Usage',\n          // User's input data\n          data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\n          backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)']\n        }, {\n          label: 'Australia Average',\n          // Australia's average data\n          data: australiaAverageData,\n          backgroundColor: ['rgba(255, 99, 132, 0.3)', 'rgba(54, 162, 235, 0.3)', 'rgba(255, 206, 86, 0.3)']\n        }]\n      };\n      setChartData(newData);\n      setShowChart(false);\n      setCurrentQuestionIndex(0);\n      setInputSubmitted(true);\n    } else {\n      alert('Please enter all the required data. And the data must be positive.');\n    }\n  };\n\n  // Function to handle option selection\n  const handleOptionSelect = selectedOption => {\n    setIsOptionSelected(true);\n    setAnswers([...answers, {\n      question: questions[currentQuestionIndex].question,\n      answer: selectedOption\n    }]);\n  };\n\n  // Function to move to the next question or display the chart\n  const handleNext = () => {\n    if (isOptionSelected) {\n      setFade('fade-exit');\n      setTimeout(() => {\n        if (currentQuestionIndex < questions.length - 1) {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          setShowChart(true);\n        }\n        setFade('fade-enter-active');\n        setIsOptionSelected(false);\n      }, 500);\n    }\n  };\n\n  // Chart options configuration\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: !showChart && !inputSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter the yearly amount of your family\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `fade ${fade} question-update`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"gasInput\",\n            children: \"Gas:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"gasInput\",\n            value: gas,\n            onChange: e => setGas(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"electricityInput\",\n            children: \"Electricity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"electricityInput\",\n            value: electricity,\n            onChange: e => setElectricity(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"waterInput\",\n            children: \"Water:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"waterInput\",\n            value: water,\n            onChange: e => setWater(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this) : !showChart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\",\n            id: `option-${index}`,\n            name: \"option\",\n            value: option,\n            onChange: () => handleOptionSelect(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `option-${index}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !isOptionSelected,\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade}`,\n      children: [chartData && /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 35\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Notes:The unit of water is 10L The unit of electricity is KWH The Gas unit is PJ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_s(Calculate, \"/+xhOgxqmdAxv9m6oB9YnnY8uOA=\");\n_c = Calculate;\nexport default Calculate;\nvar _c;\n$RefreshReg$(_c, \"Calculate\");","map":{"version":3,"names":["React","useState","Bar","jsxDEV","_jsxDEV","questions","question","options","type","australiaAverageData","Calculate","_s","currentQuestionIndex","setCurrentQuestionIndex","showChart","setShowChart","fade","setFade","isOptionSelected","setIsOptionSelected","answers","setAnswers","gas","setGas","electricity","setElectricity","water","setWater","inputSubmitted","setInputSubmitted","chartData","setChartData","handleInputSubmit","parseFloat","newData","labels","datasets","label","data","backgroundColor","alert","handleOptionSelect","selectedOption","answer","handleNext","setTimeout","length","chartOptions","scales","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","style","width","id","value","onChange","e","target","onClick","map","option","index","name","disabled","_c","$RefreshReg$"],"sources":["/Users/chenjunyi/Projects/ghg/BackendDev/frontend/src/calculate.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './calculate.css';\r\n\r\n// Array of questions with their options and types\r\nconst questions = [\r\n    {\r\n        question: \"Does your household have solar energy sources installed?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"What heating/cooling system do you use in your household?\",\r\n        options: [\"Electric\", \"Gas\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\r\n        options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Which electric appliances do you use in your household? (select all that apply)\",\r\n        options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\r\n        type: \"multiple\",\r\n    },\r\n    {\r\n        question: \"How frequently do you use the washing machine and dryer in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the electric oven in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the dishwasher in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How frequently do you cook in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How long do you typically spend showering or bathing?\",\r\n        options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Do you have a garden or lawn that needs watering?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n];\r\n\r\n// Australia's average data for comparison\r\nconst australiaAverageData = [10074, 6761, 12240]; // Gas, Electricity, Water\r\n\r\nfunction Calculate() {\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showChart, setShowChart] = useState(false);\r\n    const [fade, setFade] = useState('');\r\n    const [isOptionSelected, setIsOptionSelected] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [gas, setGas] = useState('');\r\n    const [electricity, setElectricity] = useState('');\r\n    const [water, setWater] = useState('');\r\n    const [inputSubmitted, setInputSubmitted] = useState(false);\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    // Function to handle input submission\r\n    const handleInputSubmit = () => {\r\n        // Check if all input fields are filled and non-negative\r\n        if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\r\n            // Generate bar chart data\r\n            const newData = {\r\n                labels: [\"Gas\", \"Electricity\", \"Water\"],\r\n                datasets: [\r\n                    {\r\n                        label: 'Usage', // User's input data\r\n                        data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.6)',\r\n                            'rgba(54, 162, 235, 0.6)',\r\n                            'rgba(255, 206, 86, 0.6)',\r\n                        ],\r\n                    },\r\n                    {\r\n                        label: 'Australia Average', // Australia's average data\r\n                        data: australiaAverageData,\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.3)',\r\n                            'rgba(54, 162, 235, 0.3)',\r\n                            'rgba(255, 206, 86, 0.3)',\r\n                        ],\r\n                    },\r\n                ],\r\n            };\r\n            setChartData(newData);\r\n\r\n            setShowChart(false);\r\n            setCurrentQuestionIndex(0);\r\n            setInputSubmitted(true);\r\n        } else {\r\n            alert('Please enter all the required data. And the data must be positive.');\r\n        }\r\n    };\r\n\r\n    // Function to handle option selection\r\n    const handleOptionSelect = (selectedOption) => {\r\n        setIsOptionSelected(true);\r\n        setAnswers([...answers, { question: questions[currentQuestionIndex].question, answer: selectedOption }]);\r\n    };\r\n\r\n    // Function to move to the next question or display the chart\r\n    const handleNext = () => {\r\n        if (isOptionSelected) {\r\n            setFade('fade-exit');\r\n            setTimeout(() => {\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                } else {\r\n                    setShowChart(true);\r\n                }\r\n                setFade('fade-enter-active');\r\n                setIsOptionSelected(false); \r\n            }, 500); \r\n        }\r\n    };\r\n\r\n    // Chart options configuration\r\n    const chartOptions = {\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {!showChart && !inputSubmitted ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <div>\r\n                        <p>Please enter the yearly amount of your family</p>\r\n                    </div>\r\n                    <div className={`fade ${fade} question-update`}>\r\n                        <div className=\"input-group\">\r\n                            <label htmlFor=\"gasInput\">Gas:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"gasInput\" value={gas} onChange={(e) => setGas(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label htmlFor=\"electricityInput\">Electricity:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"electricityInput\" value={electricity} onChange={(e) => setElectricity(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label htmlFor=\"waterInput\">Water:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"waterInput\" value={water} onChange={(e) => setWater(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={handleInputSubmit}>Submit</button>\r\n                    </div>\r\n                </div>\r\n            ) : !showChart ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <h2>{questions[currentQuestionIndex].question}</h2>\r\n                    <div className=\"options-container\">\r\n                        {questions[currentQuestionIndex].options.map((option, index) => (\r\n                            <div key={index}>\r\n                                <input\r\n                                    type={questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\"}\r\n                                    id={`option-${index}`}\r\n                                    name=\"option\"\r\n                                    value={option}\r\n                                    onChange={() => handleOptionSelect(option)}\r\n                                />\r\n                                <label htmlFor={`option-${index}`}>{option}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <button disabled={!isOptionSelected} onClick={handleNext}>Next</button>\r\n                </div>\r\n            ) : (\r\n                <div className={`fade ${fade}`}>\r\n                    {chartData && <Bar data={chartData} options={chartOptions} />}\r\n                    <div>\r\n                        <p>Notes:The unit of water is 10L\r\n                            The unit of electricity is KWH\r\n                            The Gas unit is PJ\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,iBAAiB;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,CACd;EACIC,QAAQ,EAAE,0DAA0D;EACpEC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;EACtBC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,2DAA2D;EACrEC,OAAO,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC;EAC5BC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,8GAA8G;EACxHC,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,mBAAmB,CAAC;EACrEC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,iFAAiF;EAC3FC,OAAO,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,EAAE,WAAW,CAAC;EACzGC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,4EAA4E;EACtFC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,2DAA2D;EACrEC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,wDAAwD;EAClEC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,+CAA+C;EACzDC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,cAAc,CAAC;EACvFC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,uDAAuD;EACjEC,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,sBAAsB,CAAC;EACnEC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,mDAAmD;EAC7DC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;EACtBC,IAAI,EAAE;AACV,CAAC,CACJ;;AAED;AACA,MAAMC,oBAAoB,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;;AAEnD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACqB,GAAG,EAAEC,MAAM,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC2B,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAM+B,iBAAiB,GAAGA,CAAA,KAAM;IAC5B;IACA,IAAIV,GAAG,KAAK,EAAE,IAAIE,WAAW,KAAK,EAAE,IAAIE,KAAK,KAAK,EAAE,IAAIO,UAAU,CAACX,GAAG,CAAC,IAAI,CAAC,IAAIW,UAAU,CAACT,WAAW,CAAC,IAAI,CAAC,IAAIS,UAAU,CAACP,KAAK,CAAC,IAAI,CAAC,EAAE;MACpI;MACA,MAAMQ,OAAO,GAAG;QACZC,MAAM,EAAE,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC;QACvCC,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,OAAO;UAAE;UAChBC,IAAI,EAAE,CAACL,UAAU,CAACX,GAAG,CAAC,EAAEW,UAAU,CAACT,WAAW,CAAC,EAAES,UAAU,CAACP,KAAK,CAAC,CAAC;UACnEa,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB;QAEjC,CAAC,EACD;UACIF,KAAK,EAAE,mBAAmB;UAAE;UAC5BC,IAAI,EAAE7B,oBAAoB;UAC1B8B,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB;QAEjC,CAAC;MAET,CAAC;MACDR,YAAY,CAACG,OAAO,CAAC;MAErBnB,YAAY,CAAC,KAAK,CAAC;MACnBF,uBAAuB,CAAC,CAAC,CAAC;MAC1BgB,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,MAAM;MACHW,KAAK,CAAC,oEAAoE,CAAC;IAC/E;EACJ,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAIC,cAAc,IAAK;IAC3CvB,mBAAmB,CAAC,IAAI,CAAC;IACzBE,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE;MAAEd,QAAQ,EAAED,SAAS,CAACO,oBAAoB,CAAC,CAACN,QAAQ;MAAEqC,MAAM,EAAED;IAAe,CAAC,CAAC,CAAC;EAC5G,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAI1B,gBAAgB,EAAE;MAClBD,OAAO,CAAC,WAAW,CAAC;MACpB4B,UAAU,CAAC,MAAM;QACb,IAAIjC,oBAAoB,GAAGP,SAAS,CAACyC,MAAM,GAAG,CAAC,EAAE;UAC7CjC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;QACrD,CAAC,MAAM;UACHG,YAAY,CAAC,IAAI,CAAC;QACtB;QACAE,OAAO,CAAC,mBAAmB,CAAC;QAC5BE,mBAAmB,CAAC,KAAK,CAAC;MAC9B,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;;EAED;EACA,MAAM4B,YAAY,GAAG;IACjBC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,WAAW,EAAE;MACjB;IACJ;EACJ,CAAC;EAED,oBACI9C,OAAA;IAAK+C,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrB,CAACtC,SAAS,IAAI,CAACc,cAAc,gBAC1BxB,OAAA;MAAK+C,SAAS,EAAG,QAAOnC,IAAK,qBAAqB;MAAAoC,QAAA,gBAC9ChD,OAAA;QAAAgD,QAAA,eACIhD,OAAA;UAAAgD,QAAA,EAAG;QAA6C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACNpD,OAAA;QAAK+C,SAAS,EAAG,QAAOnC,IAAK,kBAAkB;QAAAoC,QAAA,gBAC3ChD,OAAA;UAAK+C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACxBhD,OAAA;YAAOqD,OAAO,EAAC,UAAU;YAAAL,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtCpD,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAACkD,KAAK,EAAE;cAACC,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,UAAU;YAACC,KAAK,EAAEvC,GAAI;YAACwC,QAAQ,EAAGC,CAAC,IAAKxC,MAAM,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/G,CAAC,eACNpD,OAAA;UAAK+C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACxBhD,OAAA;YAAOqD,OAAO,EAAC,kBAAkB;YAAAL,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtDpD,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAACkD,KAAK,EAAE;cAACC,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,kBAAkB;YAACC,KAAK,EAAErC,WAAY;YAACsC,QAAQ,EAAGC,CAAC,IAAKtC,cAAc,CAACsC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvI,CAAC,eACNpD,OAAA;UAAK+C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACxBhD,OAAA;YAAOqD,OAAO,EAAC,YAAY;YAAAL,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1CpD,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAACkD,KAAK,EAAE;cAACC,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,YAAY;YAACC,KAAK,EAAEnC,KAAM;YAACoC,QAAQ,EAAGC,CAAC,IAAKpC,QAAQ,CAACoC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNpD,OAAA;QAAAgD,QAAA,eACIhD,OAAA;UAAQ6D,OAAO,EAAEjC,iBAAkB;UAAAoB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,GACN,CAAC1C,SAAS,gBACVV,OAAA;MAAK+C,SAAS,EAAG,QAAOnC,IAAK,qBAAqB;MAAAoC,QAAA,gBAC9ChD,OAAA;QAAAgD,QAAA,EAAK/C,SAAS,CAACO,oBAAoB,CAAC,CAACN;MAAQ;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnDpD,OAAA;QAAK+C,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC7B/C,SAAS,CAACO,oBAAoB,CAAC,CAACL,OAAO,CAAC2D,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvDhE,OAAA;UAAAgD,QAAA,gBACIhD,OAAA;YACII,IAAI,EAAEH,SAAS,CAACO,oBAAoB,CAAC,CAACJ,IAAI,KAAK,QAAQ,GAAG,OAAO,GAAG,UAAW;YAC/EoD,EAAE,EAAG,UAASQ,KAAM,EAAE;YACtBC,IAAI,EAAC,QAAQ;YACbR,KAAK,EAAEM,MAAO;YACdL,QAAQ,EAAEA,CAAA,KAAMrB,kBAAkB,CAAC0B,MAAM;UAAE;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC,eACFpD,OAAA;YAAOqD,OAAO,EAAG,UAASW,KAAM,EAAE;YAAAhB,QAAA,EAAEe;UAAM;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAR7CY,KAAK;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNpD,OAAA;QAAQkE,QAAQ,EAAE,CAACpD,gBAAiB;QAAC+C,OAAO,EAAErB,UAAW;QAAAQ,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,gBAENpD,OAAA;MAAK+C,SAAS,EAAG,QAAOnC,IAAK,EAAE;MAAAoC,QAAA,GAC1BtB,SAAS,iBAAI1B,OAAA,CAACF,GAAG;QAACoC,IAAI,EAAER,SAAU;QAACvB,OAAO,EAAEwC;MAAa;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7DpD,OAAA;QAAAgD,QAAA,eACIhD,OAAA;UAAAgD,QAAA,EAAG;QAGH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC7C,EAAA,CA1IQD,SAAS;AAAA6D,EAAA,GAAT7D,SAAS;AA4IlB,eAAeA,SAAS;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}