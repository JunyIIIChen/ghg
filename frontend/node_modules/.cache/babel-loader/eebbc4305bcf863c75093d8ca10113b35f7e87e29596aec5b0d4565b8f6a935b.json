{"ast":null,"code":"var _jsxFileName = \"/Users/chenjunyi/Projects/ghg/frontend/src/calculate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport './calculate.css';\nimport gasImage from './photo/gas.png';\nimport waterImage from './photo/water.png';\nimport electricityImage from './photo/electricity.png';\n\n// Array of questions with their options and types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  question: \"Does your household have solar energy sources installed?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}, {\n  question: \"What heating/cooling system do you use in your household?\",\n  options: [\"Electric\", \"Gas\"],\n  type: \"single\"\n}, {\n  question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\n  options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\n  type: \"single\"\n}, {\n  question: \"Which electric appliances do you use in your household? (select all that apply)\",\n  options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\n  type: \"multiple\"\n}, {\n  question: \"How frequently do you use the washing machine and dryer in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the electric oven in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How often do you use the dishwasher in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\n  type: \"single\"\n}, {\n  question: \"How frequently do you cook in your household?\",\n  options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\n  type: \"single\"\n}, {\n  question: \"How long do you typically spend showering or bathing?\",\n  options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\n  type: \"single\"\n}, {\n  question: \"Do you have a garden or lawn that needs watering?\",\n  options: [\"Yes\", \"No\"],\n  type: \"single\"\n}];\nconst australiaPerCapitaEmissions = 1.23;\nconst australiaAverageData = [839.5, 563.4, 10200]; // Gas, Electricity, Water\n\nfunction Calculate() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showChart, setShowChart] = useState(false);\n  const [fade, setFade] = useState('');\n  const [isOptionSelected, setIsOptionSelected] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [gas, setGas] = useState('');\n  const [electricity, setElectricity] = useState('');\n  const [water, setWater] = useState('');\n  const [inputSubmitted, setInputSubmitted] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const [emissions, setEmissions] = useState(0); // State for total emissions\n  const [comparisonChartData, setComparisonChartData] = useState(null);\n  // Constants for emission factors (you should adjust these according to your screenshots)\n  const EF2_Electricity = 0.85;\n  const EF3_Electricity = 0.07;\n\n  // Example for LPG gas\n  const EC_Gas = 25.7; // Energy content factor for LPG\n  const EF1_Gas = 60.6; // Scope 1 emission factor for LPG\n  const EF3_Gas = 20.2; // Scope 3 emission factor for LPG\n\n  // Example for Water\n  const emissionFactor_PotableWater = 0.173;\n  const emissionFactor_Wastewater = 0.875;\n  const [gasChartData, setGasChartData] = useState(null);\n  const [electricityChartData, setElectricityChartData] = useState(null);\n  const [waterChartData, setWaterChartData] = useState(null);\n\n  // Function to calculate emissions\n  const calculateEmissions = () => {\n    const electricityValue = parseFloat(electricity);\n    const gasValue = parseFloat(gas);\n    const waterValue = parseFloat(water);\n    const electricityEmissions = electricityValue * (EF2_Electricity + EF3_Electricity) / 1000;\n    const gasEmissions = gasValue * EC_Gas * (EF1_Gas + EF3_Gas) / 1000;\n    const waterEmissions = waterValue * emissionFactor_PotableWater + waterValue * emissionFactor_Wastewater;\n    return electricityEmissions + gasEmissions + waterEmissions;\n  };\n  const generateComparisonChart = userEmissions => {\n    const comparisonData = {\n      labels: ['Your Emissions', 'Australia Average'],\n      datasets: [{\n        label: 'CO2 Emissions (tonnes)',\n        data: [userEmissions, australiaPerCapitaEmissions],\n        backgroundColor: ['rgba(99, 255, 132, 0.6)', 'rgba(255, 99, 132, 0.6)']\n      }]\n    };\n    setComparisonChartData(comparisonData);\n  };\n\n  // Function to handle input submission\n  // const handleInputSubmit = () => {\n  //     // Check if all input fields are filled and non-negative\n  //     if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\n  //         // Generate bar chart data\n  //         const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\n  //         setEmissions(totalEmissionsTonnes); // Update emissions state\n  //         generateComparisonChart(totalEmissionsTonnes);\n  //         // Separate the chart data setting for gas, electricity, and water\n  //         generateGasChart(parseFloat(gas));\n  //         generateElectricityChart(parseFloat(electricity));\n  //         generateWaterChart(parseFloat(water)); // Assuming original water value is in 10L\n\n  //         const newData = {\n  //             labels: [\"Gas\", \"Electricity\", \"Water\"],\n  //             datasets: [\n  //                 {\n  //                     label: 'Usage', // User's input data\n  //                     data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\n  //                     backgroundColor: [\n  //                         'rgba(255, 99, 132, 0.6)',\n  //                         'rgba(54, 162, 235, 0.6)',\n  //                         'rgba(255, 206, 86, 0.6)',\n  //                     ],\n  //                 },\n  //                 {\n  //                     label: 'Australia Average', // Australia's average data\n  //                     data: australiaAverageData,\n  //                     backgroundColor: [\n  //                         'rgba(255, 99, 132, 0.3)',\n  //                         'rgba(54, 162, 235, 0.3)',\n  //                         'rgba(255, 206, 86, 0.3)',\n  //                     ],\n  //                 },\n  //             ],\n  //         };\n  //         setChartData(newData);\n\n  //         // Show charts\n  //         setShowChart(false);\n  //         setCurrentQuestionIndex(0);\n  //         setInputSubmitted(true);\n  //     } else {\n  //         alert('Please enter all the required data. And the data must be positive.');\n  //     }\n  // };\n\n  const handleInputSubmit = () => {\n    // Check if all input fields are filled and non-negative\n    if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\n      // Generate bar chart data\n      const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\n      setEmissions(totalEmissionsTonnes); // Update emissions state\n      generateComparisonChart(totalEmissionsTonnes);\n      // Separate the chart data setting for gas, electricity, and water\n      generateGasChart(parseFloat(gas));\n      generateElectricityChart(parseFloat(electricity));\n      generateWaterChart(parseFloat(water)); // Assuming original water value is in 10L\n\n      const newData = {\n        labels: [\"Gas\", \"Electricity\", \"Water\"],\n        datasets: [{\n          label: 'Usage',\n          // User's input data\n          data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\n          backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)']\n        }, {\n          label: 'Australia Average',\n          // Australia's average data\n          data: australiaAverageData,\n          backgroundColor: ['rgba(255, 99, 132, 0.3)', 'rgba(54, 162, 235, 0.3)', 'rgba(255, 206, 86, 0.3)']\n        }]\n      };\n      setChartData(newData);\n\n      // Show charts\n      setShowChart(true); // Change this to true\n      setCurrentQuestionIndex(0);\n      setInputSubmitted(true);\n    } else {\n      alert('Please enter all the required data. And the data must be positive.');\n    }\n  };\n\n  // Function to handle option selection\n  const handleOptionSelect = selectedOption => {\n    setIsOptionSelected(true);\n    setAnswers([...answers, {\n      question: questions[currentQuestionIndex].question,\n      answer: selectedOption\n    }]);\n  };\n\n  // Function to move to the next question or display the chart\n  const handleNext = () => {\n    if (isOptionSelected) {\n      setFade('fade-exit');\n      setTimeout(() => {\n        if (currentQuestionIndex < questions.length - 1) {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n          setShowChart(true);\n        }\n        setFade('fade-enter-active');\n        setIsOptionSelected(false);\n      }, 500);\n    }\n  };\n\n  // Chart options configuration\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  const generateGasChart = gasUsage => {\n    const data = {\n      labels: ['Gas'],\n      datasets: [{\n        label: 'Usage',\n        data: [gasUsage],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)'\n      }, {\n        label: 'Australia Average',\n        data: [australiaAverageData[0]],\n        // Gas average\n        backgroundColor: 'rgba(255, 99, 132, 0.3)'\n      }]\n    };\n    setGasChartData(data);\n  };\n  const generateElectricityChart = electricityUsage => {\n    const data = {\n      labels: ['Electricity'],\n      datasets: [{\n        label: 'Usage',\n        data: [electricityUsage],\n        backgroundColor: 'rgba(54, 162, 235, 0.6)'\n      }, {\n        label: 'Australia Average',\n        data: [australiaAverageData[1]],\n        // Electricity average\n        backgroundColor: 'rgba(54, 162, 235, 0.3)'\n      }]\n    };\n    setElectricityChartData(data);\n  };\n  const generateWaterChart = waterUsage => {\n    const data = {\n      labels: ['Water'],\n      datasets: [{\n        label: 'Usage',\n        data: [waterUsage],\n        // Water usage converted to L\n        backgroundColor: 'rgba(255, 206, 86, 0.6)'\n      }, {\n        label: 'Australia Average',\n        data: [australiaAverageData[2]],\n        // Water average\n        backgroundColor: 'rgba(255, 206, 86, 0.3)'\n      }]\n    };\n    setWaterChartData(data);\n  };\n  const chartRowStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    // 如果您希望图表在垂直方向上居中对齐\n    marginTop: '20px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: !showChart && !inputSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter the monthly amount of your family\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: gasImage,\n          alt: \"Gas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: electricityImage,\n          alt: \"Electricity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: waterImage,\n          alt: \"Water\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `fade ${fade} question-update`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"9%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"gasInput\",\n            children: \"Gas:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"gasInput\",\n            value: gas,\n            onChange: e => setGas(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"PJ\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"5%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"electricityInput\",\n            children: \"Electricity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"electricityInput\",\n            value: electricity,\n            onChange: e => setElectricity(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"KWH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          style: {\n            marginLeft: \"5%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"waterInput\",\n            children: \"Water:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"30%\"\n            },\n            id: \"waterInput\",\n            value: water,\n            onChange: e => setWater(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }, this) : !showChart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade} question-container`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\",\n            id: `option-${index}`,\n            name: \"option\",\n            value: option,\n            onChange: () => handleOptionSelect(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `option-${index}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !isOptionSelected,\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade ${fade}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [comparisonChartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-box\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              data: comparisonChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          style: {\n            marginLeft: '20%'\n          },\n          children: [\"Total CO2 Emissions: \", emissions.toFixed(2), \" tonnes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"analysis:XXXXX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }, this), showChart && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: chartRowStyle,\n        children: [gasChartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-box\",\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: gasChartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), electricityChartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-box\",\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: electricityChartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), waterChartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-box\",\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: waterChartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginLeft: '20%'\n          },\n          children: \"Notes: water is L electricity is KWH Gas is PJ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"analysis:XXXXX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n}\n_s(Calculate, \"hGozrgdrzmybHTXSy54c1DSXrNE=\");\n_c = Calculate;\nexport default Calculate;\nvar _c;\n$RefreshReg$(_c, \"Calculate\");","map":{"version":3,"names":["React","useState","Bar","gasImage","waterImage","electricityImage","jsxDEV","_jsxDEV","questions","question","options","type","australiaPerCapitaEmissions","australiaAverageData","Calculate","_s","currentQuestionIndex","setCurrentQuestionIndex","showChart","setShowChart","fade","setFade","isOptionSelected","setIsOptionSelected","answers","setAnswers","gas","setGas","electricity","setElectricity","water","setWater","inputSubmitted","setInputSubmitted","chartData","setChartData","emissions","setEmissions","comparisonChartData","setComparisonChartData","EF2_Electricity","EF3_Electricity","EC_Gas","EF1_Gas","EF3_Gas","emissionFactor_PotableWater","emissionFactor_Wastewater","gasChartData","setGasChartData","electricityChartData","setElectricityChartData","waterChartData","setWaterChartData","calculateEmissions","electricityValue","parseFloat","gasValue","waterValue","electricityEmissions","gasEmissions","waterEmissions","generateComparisonChart","userEmissions","comparisonData","labels","datasets","label","data","backgroundColor","handleInputSubmit","totalEmissionsTonnes","generateGasChart","generateElectricityChart","generateWaterChart","newData","alert","handleOptionSelect","selectedOption","answer","handleNext","setTimeout","length","chartOptions","scales","y","beginAtZero","gasUsage","electricityUsage","waterUsage","chartRowStyle","display","flexDirection","justifyContent","alignItems","marginTop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","marginLeft","htmlFor","width","id","value","onChange","e","target","onClick","map","option","index","name","disabled","toFixed","_c","$RefreshReg$"],"sources":["/Users/chenjunyi/Projects/ghg/frontend/src/calculate.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './calculate.css';\r\nimport gasImage from './photo/gas.png';\r\nimport waterImage from './photo/water.png';\r\nimport electricityImage from './photo/electricity.png';\r\n\r\n// Array of questions with their options and types\r\nconst questions = [\r\n    {\r\n        question: \"Does your household have solar energy sources installed?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"What heating/cooling system do you use in your household?\",\r\n        options: [\"Electric\", \"Gas\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How many hours per day, on average, do you operate your air conditioner or heating system in your household?\",\r\n        options: [\"0-2 hours\", \"2-4 hours\", \"4-6 hours\", \"More than 6 hours\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Which electric appliances do you use in your household? (select all that apply)\",\r\n        options: [\"Refrigerator\", \"Washing machine\", \"Clothes Dryer\", \"Dishwasher\", \"Electric oven\", \"Microwave\"],\r\n        type: \"multiple\",\r\n    },\r\n    {\r\n        question: \"How frequently do you use the washing machine and dryer in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the electric oven in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How often do you use the dishwasher in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t have it\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How frequently do you cook in your household?\",\r\n        options: [\"Daily\", \"Twice in a week\", \"Once in a week\", \"Not so often\", \"I don’t cook\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"How long do you typically spend showering or bathing?\",\r\n        options: [\"10-15 minutes\", \"15-30 minutes\", \"More than 30 minutes\"],\r\n        type: \"single\",\r\n    },\r\n    {\r\n        question: \"Do you have a garden or lawn that needs watering?\",\r\n        options: [\"Yes\", \"No\"],\r\n        type: \"single\",\r\n    },\r\n];\r\nconst australiaPerCapitaEmissions = 1.23;\r\nconst australiaAverageData = [839.5, 563.4, 10200]; // Gas, Electricity, Water\r\n\r\nfunction Calculate() {\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showChart, setShowChart] = useState(false);\r\n    const [fade, setFade] = useState('');\r\n    const [isOptionSelected, setIsOptionSelected] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [gas, setGas] = useState('');\r\n    const [electricity, setElectricity] = useState('');\r\n    const [water, setWater] = useState('');\r\n    const [inputSubmitted, setInputSubmitted] = useState(false);\r\n    const [chartData, setChartData] = useState(null);\r\n    const [emissions, setEmissions] = useState(0); // State for total emissions\r\n    const [comparisonChartData, setComparisonChartData] = useState(null);\r\n    // Constants for emission factors (you should adjust these according to your screenshots)\r\n    const EF2_Electricity = 0.85;\r\n    const EF3_Electricity = 0.07;\r\n    \r\n    // Example for LPG gas\r\n    const EC_Gas = 25.7; // Energy content factor for LPG\r\n    const EF1_Gas = 60.6; // Scope 1 emission factor for LPG\r\n    const EF3_Gas = 20.2; // Scope 3 emission factor for LPG\r\n    \r\n    // Example for Water\r\n    const emissionFactor_PotableWater = 0.173;\r\n    const emissionFactor_Wastewater = 0.875;\r\n    const [gasChartData, setGasChartData] = useState(null);\r\n    const [electricityChartData, setElectricityChartData] = useState(null);\r\n    const [waterChartData, setWaterChartData] = useState(null);\r\n\r\n    // Function to calculate emissions\r\n    const calculateEmissions = () => {\r\n      const electricityValue = parseFloat(electricity);\r\n      const gasValue = parseFloat(gas);\r\n      const waterValue = parseFloat(water);\r\n\r\n      const electricityEmissions = (electricityValue * (EF2_Electricity + EF3_Electricity)) / 1000;\r\n      const gasEmissions = (gasValue * EC_Gas * (EF1_Gas + EF3_Gas)) / 1000;\r\n      const waterEmissions = waterValue * emissionFactor_PotableWater + waterValue * emissionFactor_Wastewater;\r\n\r\n      return electricityEmissions + gasEmissions + waterEmissions;\r\n    };\r\n    const generateComparisonChart = (userEmissions) => {\r\n        const comparisonData = {\r\n            labels: ['Your Emissions', 'Australia Average'],\r\n            datasets: [\r\n                {\r\n                    label: 'CO2 Emissions (tonnes)',\r\n                    data: [userEmissions, australiaPerCapitaEmissions],\r\n                    backgroundColor: [\r\n                        'rgba(99, 255, 132, 0.6)',\r\n                        'rgba(255, 99, 132, 0.6)',\r\n                    ],\r\n                },\r\n            ],\r\n        };\r\n        setComparisonChartData(comparisonData);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Function to handle input submission\r\n    // const handleInputSubmit = () => {\r\n    //     // Check if all input fields are filled and non-negative\r\n    //     if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\r\n    //         // Generate bar chart data\r\n    //         const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\r\n    //         setEmissions(totalEmissionsTonnes); // Update emissions state\r\n    //         generateComparisonChart(totalEmissionsTonnes);\r\n    //         // Separate the chart data setting for gas, electricity, and water\r\n    //         generateGasChart(parseFloat(gas));\r\n    //         generateElectricityChart(parseFloat(electricity));\r\n    //         generateWaterChart(parseFloat(water)); // Assuming original water value is in 10L\r\n\r\n    //         const newData = {\r\n    //             labels: [\"Gas\", \"Electricity\", \"Water\"],\r\n    //             datasets: [\r\n    //                 {\r\n    //                     label: 'Usage', // User's input data\r\n    //                     data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\r\n    //                     backgroundColor: [\r\n    //                         'rgba(255, 99, 132, 0.6)',\r\n    //                         'rgba(54, 162, 235, 0.6)',\r\n    //                         'rgba(255, 206, 86, 0.6)',\r\n    //                     ],\r\n    //                 },\r\n    //                 {\r\n    //                     label: 'Australia Average', // Australia's average data\r\n    //                     data: australiaAverageData,\r\n    //                     backgroundColor: [\r\n    //                         'rgba(255, 99, 132, 0.3)',\r\n    //                         'rgba(54, 162, 235, 0.3)',\r\n    //                         'rgba(255, 206, 86, 0.3)',\r\n    //                     ],\r\n    //                 },\r\n    //             ],\r\n    //         };\r\n    //         setChartData(newData);\r\n\r\n    //         // Show charts\r\n    //         setShowChart(false);\r\n    //         setCurrentQuestionIndex(0);\r\n    //         setInputSubmitted(true);\r\n    //     } else {\r\n    //         alert('Please enter all the required data. And the data must be positive.');\r\n    //     }\r\n    // };\r\n\r\n    const handleInputSubmit = () => {\r\n        // Check if all input fields are filled and non-negative\r\n        if (gas !== '' && electricity !== '' && water !== '' && parseFloat(gas) >= 0 && parseFloat(electricity) >= 0 && parseFloat(water) >= 0) {\r\n            // Generate bar chart data\r\n            const totalEmissionsTonnes = calculateEmissions() / 10000; // Convert to tonnes if necessary\r\n            setEmissions(totalEmissionsTonnes); // Update emissions state\r\n            generateComparisonChart(totalEmissionsTonnes);\r\n            // Separate the chart data setting for gas, electricity, and water\r\n            generateGasChart(parseFloat(gas));\r\n            generateElectricityChart(parseFloat(electricity));\r\n            generateWaterChart(parseFloat(water)); // Assuming original water value is in 10L\r\n    \r\n            const newData = {\r\n                labels: [\"Gas\", \"Electricity\", \"Water\"],\r\n                datasets: [\r\n                    {\r\n                        label: 'Usage', // User's input data\r\n                        data: [parseFloat(gas), parseFloat(electricity), parseFloat(water)],\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.6)',\r\n                            'rgba(54, 162, 235, 0.6)',\r\n                            'rgba(255, 206, 86, 0.6)',\r\n                        ],\r\n                    },\r\n                    {\r\n                        label: 'Australia Average', // Australia's average data\r\n                        data: australiaAverageData,\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.3)',\r\n                            'rgba(54, 162, 235, 0.3)',\r\n                            'rgba(255, 206, 86, 0.3)',\r\n                        ],\r\n                    },\r\n                ],\r\n            };\r\n            setChartData(newData);\r\n    \r\n            // Show charts\r\n            setShowChart(true); // Change this to true\r\n            setCurrentQuestionIndex(0);\r\n            setInputSubmitted(true);\r\n        } else {\r\n            alert('Please enter all the required data. And the data must be positive.');\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Function to handle option selection\r\n    const handleOptionSelect = (selectedOption) => {\r\n        setIsOptionSelected(true);\r\n        setAnswers([...answers, { question: questions[currentQuestionIndex].question, answer: selectedOption }]);\r\n    };\r\n\r\n    // Function to move to the next question or display the chart\r\n    const handleNext = () => {\r\n        if (isOptionSelected) {\r\n            setFade('fade-exit');\r\n            setTimeout(() => {\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                } else {\r\n                    setShowChart(true);\r\n                }\r\n                setFade('fade-enter-active');\r\n                setIsOptionSelected(false); \r\n            }, 500); \r\n        }\r\n    };\r\n    \r\n    // Chart options configuration\r\n    const chartOptions = {\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n            },\r\n        },\r\n    };\r\n    const generateGasChart = (gasUsage) => {\r\n        const data = {\r\n            labels: ['Gas'],\r\n            datasets: [\r\n                {\r\n                    label: 'Usage',\r\n                    data: [gasUsage],\r\n                    backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n                },\r\n                {\r\n                    label: 'Australia Average',\r\n                    data: [australiaAverageData[0]], // Gas average\r\n                    backgroundColor: 'rgba(255, 99, 132, 0.3)',\r\n                },\r\n            ],\r\n        };\r\n        setGasChartData(data);\r\n    };\r\n\r\n    const generateElectricityChart = (electricityUsage) => {\r\n        const data = {\r\n            labels: ['Electricity'],\r\n            datasets: [\r\n                {\r\n                    label: 'Usage',\r\n                    data: [electricityUsage],\r\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n                },\r\n                {\r\n                    label: 'Australia Average',\r\n                    data: [australiaAverageData[1]], // Electricity average\r\n                    backgroundColor: 'rgba(54, 162, 235, 0.3)',\r\n                },\r\n            ],\r\n        };\r\n        setElectricityChartData(data);\r\n    };\r\n\r\n    const generateWaterChart = (waterUsage) => {\r\n        const data = {\r\n            labels: ['Water'],\r\n            datasets: [\r\n                {\r\n                    label: 'Usage',\r\n                    data: [waterUsage], // Water usage converted to L\r\n                    backgroundColor: 'rgba(255, 206, 86, 0.6)',\r\n                },\r\n                {\r\n                    label: 'Australia Average',\r\n                    data: [australiaAverageData[2]], // Water average\r\n                    backgroundColor: 'rgba(255, 206, 86, 0.3)',\r\n                },\r\n            ],\r\n        };\r\n        setWaterChartData(data);\r\n    };\r\n    const chartRowStyle = {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around', \r\n        alignItems: 'center', // 如果您希望图表在垂直方向上居中对齐\r\n        marginTop: '20px',\r\n      };\r\n    return (\r\n        <div className=\"container\">\r\n            {!showChart && !inputSubmitted ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <div>\r\n                        <p>Please enter the monthly amount of your family</p>\r\n                    </div>\r\n                    <div className=\"image-container\">\r\n                        <img src={gasImage} alt=\"Gas\" />\r\n                        <img src={electricityImage} alt=\"Electricity\" />\r\n                        <img src={waterImage} alt=\"Water\" />\r\n                    </div>\r\n                    <div className={`fade ${fade} question-update`}>\r\n                        <div className=\"input-group\" style={{marginLeft:\"9%\"}}>\r\n                            <label htmlFor=\"gasInput\">Gas:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"gasInput\" value={gas} onChange={(e) => setGas(e.target.value)} />\r\n                            <text>PJ</text>\r\n                        </div>\r\n                        <div className=\"input-group\" style={{marginLeft:\"5%\"}}>\r\n                            <label htmlFor=\"electricityInput\">Electricity:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"electricityInput\" value={electricity} onChange={(e) => setElectricity(e.target.value)} />\r\n                            <text>KWH</text>\r\n                        </div>\r\n                        <div className=\"input-group\" style={{marginLeft:\"5%\"}}>\r\n                            <label htmlFor=\"waterInput\">Water:</label>\r\n                            <input type=\"number\" style={{width:\"30%\"}} id=\"waterInput\" value={water} onChange={(e) => setWater(e.target.value)} />\r\n                            <text>L</text>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={handleInputSubmit}>Submit</button>\r\n                    </div>\r\n                </div>\r\n            ) : !showChart ? (\r\n                <div className={`fade ${fade} question-container`}>\r\n                    <h2>{questions[currentQuestionIndex].question}</h2>\r\n                    <div className=\"options-container\">\r\n                        {questions[currentQuestionIndex].options.map((option, index) => (\r\n                            <div key={index}>\r\n                                <input\r\n                                    type={questions[currentQuestionIndex].type === \"single\" ? \"radio\" : \"checkbox\"}\r\n                                    id={`option-${index}`}\r\n                                    name=\"option\"\r\n                                    value={option}\r\n                                    onChange={() => handleOptionSelect(option)}\r\n                                />\r\n                                <label htmlFor={`option-${index}`}>{option}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <button disabled={!isOptionSelected} onClick={handleNext}>Next</button>\r\n                </div>\r\n            ) : (\r\n                <div className={`fade ${fade}`}>\r\n                    <div >\r\n                        \r\n                        {comparisonChartData && (\r\n                        <div className=\"chart-container\">\r\n                            <div className=\"chart-box\">\r\n                            <Bar data={comparisonChartData} options={chartOptions} />\r\n                            </div>\r\n                        </div>\r\n                        )}\r\n                        <text style={{marginLeft:'20%'}}>Total CO2 Emissions: {emissions.toFixed(2)} tonnes</text>\r\n                        <p>analysis:XXXXX</p>\r\n                    </div>\r\n                    \r\n                    {showChart && (\r\n      <div style={chartRowStyle}>\r\n        {gasChartData && (\r\n          <div className=\"chart-box\">\r\n            <Bar data={gasChartData} options={chartOptions} />\r\n          </div>\r\n        )}\r\n        {electricityChartData && (\r\n          <div className=\"chart-box\">\r\n            <Bar data={electricityChartData} options={chartOptions} />\r\n          </div>\r\n        )}\r\n        {waterChartData && (\r\n          <div className=\"chart-box\">\r\n            <Bar data={waterChartData} options={chartOptions} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )}\r\n                    \r\n                    \r\n                    <div>\r\n                        <p style={{marginLeft:'20%'}}>Notes: water is L\r\n                            electricity is KWH\r\n                            Gas is PJ\r\n                        </p>\r\n                        <p>analysis:XXXXX</p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,iBAAiB;AACxB,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,gBAAgB,MAAM,yBAAyB;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,CACd;EACIC,QAAQ,EAAE,0DAA0D;EACpEC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;EACtBC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,2DAA2D;EACrEC,OAAO,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC;EAC5BC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,8GAA8G;EACxHC,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,mBAAmB,CAAC;EACrEC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,iFAAiF;EAC3FC,OAAO,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,EAAE,WAAW,CAAC;EACzGC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,4EAA4E;EACtFC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,2DAA2D;EACrEC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,wDAAwD;EAClEC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,iBAAiB,CAAC;EAC1FC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,+CAA+C;EACzDC,OAAO,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,cAAc,CAAC;EACvFC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,uDAAuD;EACjEC,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,sBAAsB,CAAC;EACnEC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,QAAQ,EAAE,mDAAmD;EAC7DC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;EACtBC,IAAI,EAAE;AACV,CAAC,CACJ;AACD,MAAMC,2BAA2B,GAAG,IAAI;AACxC,MAAMC,oBAAoB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;;AAEpD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACyB,GAAG,EAAEC,MAAM,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACqC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EACpE;EACA,MAAMuC,eAAe,GAAG,IAAI;EAC5B,MAAMC,eAAe,GAAG,IAAI;;EAE5B;EACA,MAAMC,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB,MAAMC,OAAO,GAAG,IAAI,CAAC,CAAC;EACtB,MAAMC,OAAO,GAAG,IAAI,CAAC,CAAC;;EAEtB;EACA,MAAMC,2BAA2B,GAAG,KAAK;EACzC,MAAMC,yBAAyB,GAAG,KAAK;EACvC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACkD,cAAc,EAAEC,iBAAiB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMoD,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,gBAAgB,GAAGC,UAAU,CAAC3B,WAAW,CAAC;IAChD,MAAM4B,QAAQ,GAAGD,UAAU,CAAC7B,GAAG,CAAC;IAChC,MAAM+B,UAAU,GAAGF,UAAU,CAACzB,KAAK,CAAC;IAEpC,MAAM4B,oBAAoB,GAAIJ,gBAAgB,IAAId,eAAe,GAAGC,eAAe,CAAC,GAAI,IAAI;IAC5F,MAAMkB,YAAY,GAAIH,QAAQ,GAAGd,MAAM,IAAIC,OAAO,GAAGC,OAAO,CAAC,GAAI,IAAI;IACrE,MAAMgB,cAAc,GAAGH,UAAU,GAAGZ,2BAA2B,GAAGY,UAAU,GAAGX,yBAAyB;IAExG,OAAOY,oBAAoB,GAAGC,YAAY,GAAGC,cAAc;EAC7D,CAAC;EACD,MAAMC,uBAAuB,GAAIC,aAAa,IAAK;IAC/C,MAAMC,cAAc,GAAG;MACnBC,MAAM,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;MAC/CC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,wBAAwB;QAC/BC,IAAI,EAAE,CAACL,aAAa,EAAElD,2BAA2B,CAAC;QAClDwD,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB;MAEjC,CAAC;IAET,CAAC;IACD7B,sBAAsB,CAACwB,cAAc,CAAC;EAC1C,CAAC;;EAOD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;IAC5B;IACA,IAAI3C,GAAG,KAAK,EAAE,IAAIE,WAAW,KAAK,EAAE,IAAIE,KAAK,KAAK,EAAE,IAAIyB,UAAU,CAAC7B,GAAG,CAAC,IAAI,CAAC,IAAI6B,UAAU,CAAC3B,WAAW,CAAC,IAAI,CAAC,IAAI2B,UAAU,CAACzB,KAAK,CAAC,IAAI,CAAC,EAAE;MACpI;MACA,MAAMwC,oBAAoB,GAAGjB,kBAAkB,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;MAC3DhB,YAAY,CAACiC,oBAAoB,CAAC,CAAC,CAAC;MACpCT,uBAAuB,CAACS,oBAAoB,CAAC;MAC7C;MACAC,gBAAgB,CAAChB,UAAU,CAAC7B,GAAG,CAAC,CAAC;MACjC8C,wBAAwB,CAACjB,UAAU,CAAC3B,WAAW,CAAC,CAAC;MACjD6C,kBAAkB,CAAClB,UAAU,CAACzB,KAAK,CAAC,CAAC,CAAC,CAAC;;MAEvC,MAAM4C,OAAO,GAAG;QACZV,MAAM,EAAE,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC;QACvCC,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,OAAO;UAAE;UAChBC,IAAI,EAAE,CAACZ,UAAU,CAAC7B,GAAG,CAAC,EAAE6B,UAAU,CAAC3B,WAAW,CAAC,EAAE2B,UAAU,CAACzB,KAAK,CAAC,CAAC;UACnEsC,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB;QAEjC,CAAC,EACD;UACIF,KAAK,EAAE,mBAAmB;UAAE;UAC5BC,IAAI,EAAEtD,oBAAoB;UAC1BuD,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB;QAEjC,CAAC;MAET,CAAC;MACDjC,YAAY,CAACuC,OAAO,CAAC;;MAErB;MACAvD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpBF,uBAAuB,CAAC,CAAC,CAAC;MAC1BgB,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,MAAM;MACH0C,KAAK,CAAC,oEAAoE,CAAC;IAC/E;EACJ,CAAC;;EAQD;EACA,MAAMC,kBAAkB,GAAIC,cAAc,IAAK;IAC3CtD,mBAAmB,CAAC,IAAI,CAAC;IACzBE,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE;MAAEf,QAAQ,EAAED,SAAS,CAACQ,oBAAoB,CAAC,CAACP,QAAQ;MAAEqE,MAAM,EAAED;IAAe,CAAC,CAAC,CAAC;EAC5G,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAIzD,gBAAgB,EAAE;MAClBD,OAAO,CAAC,WAAW,CAAC;MACpB2D,UAAU,CAAC,MAAM;QACb,IAAIhE,oBAAoB,GAAGR,SAAS,CAACyE,MAAM,GAAG,CAAC,EAAE;UAC7ChE,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;QACrD,CAAC,MAAM;UACHG,YAAY,CAAC,IAAI,CAAC;QACtB;QACAE,OAAO,CAAC,mBAAmB,CAAC;QAC5BE,mBAAmB,CAAC,KAAK,CAAC;MAC9B,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;;EAED;EACA,MAAM2D,YAAY,GAAG;IACjBC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,WAAW,EAAE;MACjB;IACJ;EACJ,CAAC;EACD,MAAMd,gBAAgB,GAAIe,QAAQ,IAAK;IACnC,MAAMnB,IAAI,GAAG;MACTH,MAAM,EAAE,CAAC,KAAK,CAAC;MACfC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,CAACmB,QAAQ,CAAC;QAChBlB,eAAe,EAAE;MACrB,CAAC,EACD;QACIF,KAAK,EAAE,mBAAmB;QAC1BC,IAAI,EAAE,CAACtD,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAAE;QACjCuD,eAAe,EAAE;MACrB,CAAC;IAET,CAAC;IACDpB,eAAe,CAACmB,IAAI,CAAC;EACzB,CAAC;EAED,MAAMK,wBAAwB,GAAIe,gBAAgB,IAAK;IACnD,MAAMpB,IAAI,GAAG;MACTH,MAAM,EAAE,CAAC,aAAa,CAAC;MACvBC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,CAACoB,gBAAgB,CAAC;QACxBnB,eAAe,EAAE;MACrB,CAAC,EACD;QACIF,KAAK,EAAE,mBAAmB;QAC1BC,IAAI,EAAE,CAACtD,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAAE;QACjCuD,eAAe,EAAE;MACrB,CAAC;IAET,CAAC;IACDlB,uBAAuB,CAACiB,IAAI,CAAC;EACjC,CAAC;EAED,MAAMM,kBAAkB,GAAIe,UAAU,IAAK;IACvC,MAAMrB,IAAI,GAAG;MACTH,MAAM,EAAE,CAAC,OAAO,CAAC;MACjBC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,CAACqB,UAAU,CAAC;QAAE;QACpBpB,eAAe,EAAE;MACrB,CAAC,EACD;QACIF,KAAK,EAAE,mBAAmB;QAC1BC,IAAI,EAAE,CAACtD,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAAE;QACjCuD,eAAe,EAAE;MACrB,CAAC;IAET,CAAC;IACDhB,iBAAiB,CAACe,IAAI,CAAC;EAC3B,CAAC;EACD,MAAMsB,aAAa,GAAG;IAClBC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,cAAc;IAC9BC,UAAU,EAAE,QAAQ;IAAE;IACtBC,SAAS,EAAE;EACb,CAAC;EACH,oBACIvF,OAAA;IAAKwF,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrB,CAAC9E,SAAS,IAAI,CAACc,cAAc,gBAC1BzB,OAAA;MAAKwF,SAAS,EAAG,QAAO3E,IAAK,qBAAqB;MAAA4E,QAAA,gBAC9CzF,OAAA;QAAAyF,QAAA,eACIzF,OAAA;UAAAyF,QAAA,EAAG;QAA8C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,eACN7F,OAAA;QAAKwF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5BzF,OAAA;UAAK8F,GAAG,EAAElG,QAAS;UAACmG,GAAG,EAAC;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChC7F,OAAA;UAAK8F,GAAG,EAAEhG,gBAAiB;UAACiG,GAAG,EAAC;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChD7F,OAAA;UAAK8F,GAAG,EAAEjG,UAAW;UAACkG,GAAG,EAAC;QAAO;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACN7F,OAAA;QAAKwF,SAAS,EAAG,QAAO3E,IAAK,kBAAkB;QAAA4E,QAAA,gBAC3CzF,OAAA;UAAKwF,SAAS,EAAC,aAAa;UAACQ,KAAK,EAAE;YAACC,UAAU,EAAC;UAAI,CAAE;UAAAR,QAAA,gBAClDzF,OAAA;YAAOkG,OAAO,EAAC,UAAU;YAAAT,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtC7F,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAAC4F,KAAK,EAAE;cAACG,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,UAAU;YAACC,KAAK,EAAElF,GAAI;YAACmF,QAAQ,EAAGC,CAAC,IAAKnF,MAAM,CAACmF,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChH7F,OAAA;YAAAyF,QAAA,EAAM;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACN7F,OAAA;UAAKwF,SAAS,EAAC,aAAa;UAACQ,KAAK,EAAE;YAACC,UAAU,EAAC;UAAI,CAAE;UAAAR,QAAA,gBAClDzF,OAAA;YAAOkG,OAAO,EAAC,kBAAkB;YAAAT,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtD7F,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAAC4F,KAAK,EAAE;cAACG,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,kBAAkB;YAACC,KAAK,EAAEhF,WAAY;YAACiF,QAAQ,EAAGC,CAAC,IAAKjF,cAAc,CAACiF,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACxI7F,OAAA;YAAAyF,QAAA,EAAM;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eACN7F,OAAA;UAAKwF,SAAS,EAAC,aAAa;UAACQ,KAAK,EAAE;YAACC,UAAU,EAAC;UAAI,CAAE;UAAAR,QAAA,gBAClDzF,OAAA;YAAOkG,OAAO,EAAC,YAAY;YAAAT,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1C7F,OAAA;YAAOI,IAAI,EAAC,QAAQ;YAAC4F,KAAK,EAAE;cAACG,KAAK,EAAC;YAAK,CAAE;YAACC,EAAE,EAAC,YAAY;YAACC,KAAK,EAAE9E,KAAM;YAAC+E,QAAQ,EAAGC,CAAC,IAAK/E,QAAQ,CAAC+E,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACtH7F,OAAA;YAAAyF,QAAA,EAAM;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACN7F,OAAA;QAAAyF,QAAA,eACIzF,OAAA;UAAQyG,OAAO,EAAE3C,iBAAkB;UAAA2B,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,GACN,CAAClF,SAAS,gBACVX,OAAA;MAAKwF,SAAS,EAAG,QAAO3E,IAAK,qBAAqB;MAAA4E,QAAA,gBAC9CzF,OAAA;QAAAyF,QAAA,EAAKxF,SAAS,CAACQ,oBAAoB,CAAC,CAACP;MAAQ;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnD7F,OAAA;QAAKwF,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC7BxF,SAAS,CAACQ,oBAAoB,CAAC,CAACN,OAAO,CAACuG,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvD5G,OAAA;UAAAyF,QAAA,gBACIzF,OAAA;YACII,IAAI,EAAEH,SAAS,CAACQ,oBAAoB,CAAC,CAACL,IAAI,KAAK,QAAQ,GAAG,OAAO,GAAG,UAAW;YAC/EgG,EAAE,EAAG,UAASQ,KAAM,EAAE;YACtBC,IAAI,EAAC,QAAQ;YACbR,KAAK,EAAEM,MAAO;YACdL,QAAQ,EAAEA,CAAA,KAAMjC,kBAAkB,CAACsC,MAAM;UAAE;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC,eACF7F,OAAA;YAAOkG,OAAO,EAAG,UAASU,KAAM,EAAE;YAAAnB,QAAA,EAAEkB;UAAM;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAR7Ce,KAAK;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN7F,OAAA;QAAQ8G,QAAQ,EAAE,CAAC/F,gBAAiB;QAAC0F,OAAO,EAAEjC,UAAW;QAAAiB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,gBAEN7F,OAAA;MAAKwF,SAAS,EAAG,QAAO3E,IAAK,EAAE;MAAA4E,QAAA,gBAC3BzF,OAAA;QAAAyF,QAAA,GAEK1D,mBAAmB,iBACpB/B,OAAA;UAAKwF,SAAS,EAAC,iBAAiB;UAAAC,QAAA,eAC5BzF,OAAA;YAAKwF,SAAS,EAAC,WAAW;YAAAC,QAAA,eAC1BzF,OAAA,CAACL,GAAG;cAACiE,IAAI,EAAE7B,mBAAoB;cAAC5B,OAAO,EAAEwE;YAAa;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACJ,eACD7F,OAAA;UAAMgG,KAAK,EAAE;YAACC,UAAU,EAAC;UAAK,CAAE;UAAAR,QAAA,GAAC,uBAAqB,EAAC5D,SAAS,CAACkF,OAAO,CAAC,CAAC,CAAC,EAAC,SAAO;QAAA;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC1F7F,OAAA;UAAAyF,QAAA,EAAG;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC,EAELlF,SAAS,iBACxBX,OAAA;QAAKgG,KAAK,EAAEd,aAAc;QAAAO,QAAA,GACvBjD,YAAY,iBACXxC,OAAA;UAAKwF,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxBzF,OAAA,CAACL,GAAG;YAACiE,IAAI,EAAEpB,YAAa;YAACrC,OAAO,EAAEwE;UAAa;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CACN,EACAnD,oBAAoB,iBACnB1C,OAAA;UAAKwF,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxBzF,OAAA,CAACL,GAAG;YAACiE,IAAI,EAAElB,oBAAqB;YAACvC,OAAO,EAAEwE;UAAa;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CACN,EACAjD,cAAc,iBACb5C,OAAA;UAAKwF,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxBzF,OAAA,CAACL,GAAG;YAACiE,IAAI,EAAEhB,cAAe;YAACzC,OAAO,EAAEwE;UAAa;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACN,eAGe7F,OAAA;QAAAyF,QAAA,gBACIzF,OAAA;UAAGgG,KAAK,EAAE;YAACC,UAAU,EAAC;UAAK,CAAE;UAAAR,QAAA,EAAC;QAG9B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJ7F,OAAA;UAAAyF,QAAA,EAAG;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACrF,EAAA,CAlWQD,SAAS;AAAAyG,EAAA,GAATzG,SAAS;AAoWlB,eAAeA,SAAS;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}